@inject NavigationManager _navigationManager;
@implements IDisposable;

@*
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>*@

<MList Nav
        Dense>
    <MListItemGroup @bind-Value="_selectedItem"
                    Color="primary">
        @foreach (var item in _items)
        {
            <MListItem Href="@item.Href" IsActive="@item.IsActive" Target="@item.Target">
                <MListItemIcon>
                    <MIcon>@item.Icon</MIcon>
                </MListItemIcon>

                <MListItemContent>
                    <MListItemTitle>@item.Text</MListItemTitle>
                </MListItemContent>
            </MListItem>
        }
    </MListItemGroup>
</MList>

@code {
    private StringNumber _selectedItem = 0;
    private Item[] _items = new Item[]
    {
       new Item { Text= "Home", Icon= "mdi-folder", Href="/" },
       new Item { Text= "Counter", Icon= "mdi-account-multiple", Href="/counter" },
       new Item { Text= "Fetch data", Icon= "mdi-star", Href="/fetchdata" },

    };

    class Item
    {
        public string Text { get; set; }
        public string Icon { get; set; }
        public string Href { get; set; }
        public bool IsActive { get; set; }
        public string Target { get { return Href == "/" ? "_blank":""; } }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var item in _items)
        {
            item.IsActive = new Uri(_navigationManager.Uri).AbsolutePath == item.Href;
        }
        _navigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? obj, LocationChangedEventArgs e)
    {
        foreach (var item in _items)
        {
            item.IsActive = new Uri(_navigationManager.Uri).AbsolutePath == item.Href;
        }
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }
}